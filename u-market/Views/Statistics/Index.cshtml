@{
}
<h1>Statistics</h1>
<script src="https://d3js.org/d3.v6.min.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>



<div id="vis">

</div>
<script>
    const getAllPurchases = () => {
           return $.get("/Statistics/GetAll", (data, status) => {
                if (status != "success") {
                    alert("error ocured while trying to get the statistics");
                } else {
                    return data;
                }
            });
    };

    var width = 800;
    var height = 200;

    var base = d3.select("#vis");

    var chart = base.append("canvas")
        .attr("width", width)
        .attr("height", height);
    var context = chart.node().getContext("2d");

    var dataContainer = base.append("custom");

    function drawCustom(data) {
        var scale = d3.scaleLinear()
            .range(d3.extent(data.map(d => d.y)).reverse())
            .domain(d3.extent(data.map(d => d.x*data.length*50)));

        var dataBinding = dataContainer.selectAll("custom.rect")
            .data(data);

        //dataBinding
        //    .attr("size", 15)
        //    .attr("fillStyle", "green");

        dataBinding.enter()
            .append("custom")
            .classed("rect", true)
            .attr("x", d => (d.x * width / data.length) - (width / data.length))
            .attr("y", 100)
            //.attr("height", d => -scale(d.y))
            .attr("height", d => -(d.y))
            .attr("width", width/data.length -20)
            .attr("fillStyle", "blue")
            .attr("product", d => d.product)

        //dataBinding.exit()
        //    .attr("size", 5)
        //    .attr("fillStyle", "lightgrey");

        drawCanvas();
    }

    function drawCanvas() {

        // clear canvas
        context.fillStyle = "#fff";
        context.rect(0, 0, chart.attr("width"), chart.attr("height"));
        context.fill();

        var elements = dataContainer.selectAll("custom.rect");
        elements.each(function (d) {
            var node = d3.select(this);

            context.beginPath();
            context.fillStyle = node.attr("fillStyle");
            context.rect(node.attr("x"), node.attr("y"), node.attr("width"), node.attr("height"));
            context.fill();


            //Drawing Text
            context.fillStyle = "black";
            //There are several options for setting text
            context.font = "15px Open Sans";
            //textAlign supports: start, end, left, right, center
            context.textAlign = "start"
            //textBaseline supports: top, hanging, middle, alphabetic, ideographic bottom
            context.textBaseline = "hanging"
            context.fillText(node.attr("product"), node.attr("x"), node.attr("y"));

            context.closePath();

        })
 
    }
    let countOfPurchasesByName;

    getAllPurchases().then((res, rej) => {
        try {
            countOfPurchasesByName = res;
        } catch (err) {
            console.log(err);
            console.log(rej);
        }
    });
    //let count = 0;
    //countOfPurchasesByName = countOfPurchasesByName.map(x => {
    //    return ({ x: count++, y: x.count, x.name })
    //});
    drawCustom([{ x: 1, y: 20, product: "rami" }, { x: 2, y: 50, product: "yoni" }, { x: 3, y: 44, product: "uriel" },
        { x: 4, y: 20, product: "rami" }, { x: 5, y: 50, product: "yoni" }, { x: 6, y: 44, product: "uriel" },
        { x: 7, y: 20, product: "rami" }, { x: 8, y: 50, product: "yoni" }, { x: 9, y: 44, product: "uriel" },
        { x: 10, y: 20, product: "rami" }, { x: 11, y: 50, product: "yoni" }, { x: 12, y: 44, product: "uriel" }]);


    // Work with svg
    //d3.select("#firstGraph").attr("height", height).attr("width", width)
    //    .append("g")
    //    .selectAll("g")
    //    .data(series)
    //    .join("g")
    //        .attr("fill", d => {
    //            switch (d.key) {
    //                case "apples":
    //                    return "#123456"
    //                case "bananas":
    //                    return "#723456"
    //                case "cherries":
    //                    return "#a23456"
    //                case "dates":
    //                    return "#f123456"
    //            }
    //        })
    //    .selectAll("rect")
    //    .data(d => d)
    //    .join("rect")
    //        .attr("x", d => (d["data"].month))
    //        .attr("y", d => (d[0] / 30))
    //        .attr("height", d => (d[1] - d[0]) / 30).attr("width", 35);

</script>
